# ****************************************************************************
#   Project:  Feographia
#   Purpose:  The application to work with the biblical text
#   Author:   NikitaFeodonit, nfeodonit@yandex.com
# ****************************************************************************
#     Copyright (c) 2017-2020 NikitaFeodonit
#
#     This file is part of the Feographia project.
#
#     This program is free software: you can redistribute it and/or modify
#     it under the terms of the GNU General Public License as published
#     by the Free Software Foundation, either version 3 of the License,
#     or (at your option) any later version.
#
#     This program is distributed in the hope that it will be useful,
#     but WITHOUT ANY WARRANTY; without even the implied warranty of
#     MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
#     See the GNU General Public License for more details.
#
#     You should have received a copy of the GNU General Public License
#     along with this program. If not, see <http://www.gnu.org/licenses/>.
# ****************************************************************************

# === Common ===

sudo: false

language: cpp

env:
  global:
    - cmr_APP_NAME=Feographia

#    - cmr_REPO_DIR=${HOME}/build/${cmr_APP_NAME}/${cmr_APP_NAME}
    # TRAVIS_REPO_SLUG: The slug (in form: owner_name/repo_name)
    # of the repository currently being built.
    - cmr_MAIN_REPO_DIR=${HOME}/build/${TRAVIS_REPO_SLUG}

    - cmr_PERSISTENT_CACHE=${HOME}/build/persistent_cache

    - cmr_WORK_DIR=${HOME}/build/work
    - cmr_REPO_DIR=${cmr_WORK_DIR}/${cmr_APP_NAME}

    - cmr_DOWNLOAD_DIR=${cmr_WORK_DIR}/download
    - cmr_UNPACKED_DIR=${cmr_WORK_DIR}/unpacked
    - cmr_BUILD_DIR=${cmr_WORK_DIR}/build

    - cmr_NOT_CACHED_INSTALL_DIR=${cmr_WORK_DIR}/install_not_cached
    - cmr_INSTALL_DIR=${cmr_PERSISTENT_CACHE}/install

    - cmr_HOST_TOOLS_PROJECT_DIR=${cmr_REPO_DIR}/host_tools
    - cmr_HOST_UNPACKED_DIR=${cmr_WORK_DIR}/unpacked_host_tools
    - cmr_HOST_BUILD_DIR=${cmr_WORK_DIR}/build_host_tools
    - cmr_HOST_INSTALL_DIR=${cmr_INSTALL_DIR}/host_tools
    - cmr_HOST_TOOLS_STAMP_FILE_NAME="host_tools_stamp"

    - cmr_BUILD_TESTING=ON
    - cmr_JOBS_CNT=4


# === Cache ===

before_cache:
  - rm -f -r -d ${cmr_BUILD_DIR}/build_libs
  - rm -f -r -d ${cmr_HOST_INSTALL_DIR}/include
  - rm -f -r -d ${cmr_HOST_INSTALL_DIR}/lib/*

cache:
#  timeout: 180  # in seconds, default is 180 seconds
  apt: true
  directories:
  - ${cmr_REPO_DIR}
  - ${cmr_BUILD_DIR}
#  - ${cmr_INSTALL_DIR}
  - ${cmr_PERSISTENT_CACHE}

# Disable cache
#cache: false


# === Env variables ===

# === CMake env ===
cmake_1st_env:
  # cmake_1st_env must be after <os>_env.
  env: &cmake_1st_env
    - cmr_CMAKE_MAJOR_VER=3
    - cmr_CMAKE_MINOR_VER=17
    - cmr_CMAKE_PATCH_VER=2

    - cmr_CMAKE_RELEASE=cmake-${cmr_CMAKE_MAJOR_VER}.${cmr_CMAKE_MINOR_VER}.${cmr_CMAKE_PATCH_VER}-${cmr_CMAKE_HOST}
    - cmr_CMAKE_AR_FILE_NAME=${cmr_CMAKE_RELEASE}.${cmr_CMAKE_AR_EXT}
    - cmr_CMAKE_BASE_URL=https://cmake.org/files/v${cmr_CMAKE_MAJOR_VER}.${cmr_CMAKE_MINOR_VER}

cmake_2nd_env:
  # cmake_2nd_env must be after <os>_cmake_env.
  env: &cmake_2nd_env
    - cmr_CMAKE_CMD=${cmr_CMAKE_DIR}/bin/cmake
    - cmr_CTEST_CMD=${cmr_CMAKE_DIR}/bin/ctest


# === Build types env ===
debug_shared_env:
  env: &debug_shared_env
    - cmr_CMAKE_BUILD_TYPE=Debug
    - cmr_BUILD_SHARED_LIBS=ON
    - cmr_ANDROID_STL=c++_shared

debug_static_env:
  env: &debug_static_env
    - cmr_CMAKE_BUILD_TYPE=Debug
    - cmr_BUILD_SHARED_LIBS=OFF
    - cmr_ANDROID_STL=c++_static

release_shared_env:
  env: &release_shared_env
    - cmr_CMAKE_BUILD_TYPE=Release
    - cmr_BUILD_SHARED_LIBS=ON
    - cmr_ANDROID_STL=c++_shared

release_static_env:
  env: &release_static_env
    - cmr_CMAKE_BUILD_TYPE=Release
    - cmr_BUILD_SHARED_LIBS=OFF
    - cmr_ANDROID_STL=c++_static


# === Linux env ===
linux_env:
  env: &linux_env
    - cmr_TARGET_OS=Linux
    - cmr_JOBS="-j${cmr_JOBS_CNT}"
#    - cmr_CMAKE_MIN_VER=3.8
    - cmr_CMAKE_HOST=Linux-x86_64
    - cmr_CMAKE_AR_EXT=tar.gz

linux_cmake_env:
  env: &linux_cmake_env
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}

linux_gcc_env:
  env: &linux_gcc_env
    - CC=gcc-9
    - CXX=g++-9

linux_clang_env:
  env: &linux_clang_env
    - CC=clang-9
    - CXX=clang++-9


# === Windows env ===
windows_env:
  env: &windows_env
    - cmr_TARGET_OS=Windows
#    - cmr_CMAKE_MIN_VER=3.11
    - cmr_CMAKE_HOST=win64-x64
    - cmr_CMAKE_AR_EXT=zip

    - cmr_ATTACH_WX_CONSOLE=ON

windows_cmake_env:
  env: &windows_cmake_env
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}

windows_msvc_env:
  env: &windows_msvc_env
    - cmr_MSVC=ON
    - cmr_CMAKE_GENERATOR="Visual Studio 15 2017"
    - cmr_CMAKE_GENERATOR_TOOLSET="v141,host=x64"
    - cmr_CMAKE_CONFIGURATION_TYPES=${cmr_CMAKE_BUILD_TYPE}
    - PATH=${cmr_BUILD_DIR}/Feographia/${cmr_CMAKE_BUILD_TYPE}:${cmr_INSTALL_DIR}/bin:${cmr_INSTALL_DIR}/bin64:${cmr_INSTALL_DIR}/lib:${PATH}

windows_msvc_x64_env:
  env: &windows_msvc_x64_env
    - cmr_CMAKE_GENERATOR_PLATFORM="x64"

windows_msvc_x32_env:
  env: &windows_msvc_x32_env
    - cmr_CMAKE_GENERATOR_PLATFORM="Win32"

windows_msvc_winxp_env:
  env: &windows_msvc_winxp_env
    - cmr_CMAKE_GENERATOR_PLATFORM="Win32"

windows_mingw_env:
  env: &windows_mingw_env
    - cmr_MINGW=ON
    - cmr_MINGW_ARCH_NAME=winlibs-x86_64-posix-seh-gcc-9.3.0-llvm-10.0.0-mingw-w64-7.0.0-r4.7z
    - cmr_MINGW_URL=https://github.com/brechtsanders/winlibs_mingw/releases/download/9.3.0-10.0.0-7.0.0-r4/${cmr_MINGW_ARCH_NAME}
    - cmr_MinGW_w64_ROOT_PATH=${cmr_NOT_CACHED_INSTALL_DIR}
    - MINGW_HOME=${cmr_MinGW_w64_ROOT_PATH}/mingw64
    - cmr_CMAKE_GENERATOR="MinGW Makefiles"
    - PATH=${cmr_BUILD_DIR}/Feographia:${cmr_INSTALL_DIR}/bin:${cmr_INSTALL_DIR}/bin64:${cmr_INSTALL_DIR}/lib:${cmr_CMAKE_DIR}/bin:${MINGW_HOME}/bin:${PATH}


# === macOS env ===
macos_env:
  env: &macos_env
    - cmr_TARGET_OS=macOS
#    - cmr_CMAKE_MIN_VER=3.12
    - cmr_CMAKE_HOST=Darwin-x86_64
    - cmr_CMAKE_AR_EXT=tar.gz

macos_cmake_env:
  env: &macos_cmake_env
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}/CMake.app/Contents

macos_xcode_env:
  env: &macos_xcode_env
    - cmr_XCODE=ON
    - cmr_JOBS="-jobs ${cmr_JOBS_CNT}"
    - cmr_CMAKE_GENERATOR="Xcode"

macos_make_env:
  env: &macos_make_env
    - cmr_UNIX_MAKE_FILES=ON
    - cmr_JOBS="-j ${cmr_JOBS_CNT}"
    - cmr_CMAKE_GENERATOR="Unix Makefiles"


# === Android env ===
android_env:
  env: &android_env
    - cmr_TARGET_OS=Android
    - cmr_JOBS="-j${cmr_JOBS_CNT}"
#    - cmr_CMAKE_MIN_VER=3.8
    - cmr_CMAKE_HOST=Linux-x86_64
    - cmr_CMAKE_AR_EXT=tar.gz

    - ANDROID_HOME=${cmr_NOT_CACHED_INSTALL_DIR}/android-sdk
    - cmr_ANDROID_CMD_TOOLS_VERSION=6200805
    - cmr_ANDROID_CMD_TOOLS_FILE_NAME=commandlinetools-linux-${cmr_ANDROID_CMD_TOOLS_VERSION}_latest.zip

    - cmr_ANDROID_NDK_VERSION=r21b
    - cmr_ANDROID_NDK_NAME=android-ndk-${cmr_ANDROID_NDK_VERSION}
    - cmr_ANDROID_NDK_PLATFORM=${cmr_ANDROID_NDK_NAME}-linux-x86_64
    - cmr_ANDROID_NDK=${cmr_NOT_CACHED_INSTALL_DIR}/${cmr_ANDROID_NDK_NAME}

    - cmr_ANDROID_CPP_FEATURES="rtti exceptions"
    - cmr_ANDROID_TOOLCHAIN=clang

    - cmr_CMAKE_TOOLCHAIN_FILE=${cmr_ANDROID_NDK}/build/cmake/android.toolchain.cmake
    - cmr_CMAKE_GENERATOR="Ninja"

    - PATH=${ANDROID_HOME}/cmdline-tools/tools/bin:${ANDROID_HOME}/platform-tools:${ANDROID_HOME}/emulator:${PATH}

android_cmake_env:
  env: &android_cmake_env
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}

android_armeabi_v7a_env:
  env: &android_armeabi_v7a_env
    - cmr_ANDROID_ABI=armeabi-v7a
    - cmr_ANDROID_NATIVE_API_LEVEL=16
    - cmr_ANDROID_EMULATOR_API_LEVEL=24

android_arm64_v8a_env:
  env: &android_arm64_v8a_env
    - cmr_ANDROID_ABI=arm64-v8a
    - cmr_ANDROID_NATIVE_API_LEVEL=21
    - cmr_ANDROID_EMULATOR_API_LEVEL=24

android_x86_env:
  env: &android_x86_env
    - cmr_ANDROID_ABI=x86
    - cmr_ANDROID_NATIVE_API_LEVEL=16
    - cmr_ANDROID_EMULATOR_API_LEVEL=23

android_x86_64_env:
  env: &android_x86_64_env
    - cmr_ANDROID_ABI=x86_64
    - cmr_ANDROID_NATIVE_API_LEVEL=21
    - cmr_ANDROID_EMULATOR_API_LEVEL=24


# === iOS env ===
ios_env:
  env: &ios_env
    - cmr_TARGET_OS=iOS
    - cmr_JOBS="-jobs ${cmr_JOBS_CNT}"
#    - cmr_CMAKE_MIN_VER=3.15
    - cmr_CMAKE_HOST=Darwin-x86_64
    - cmr_CMAKE_AR_EXT=tar.gz
    - cmr_CMAKE_GENERATOR="Xcode"

ios_cmake_env:
  env: &ios_cmake_env
    - cmr_CMAKE_DIR=${cmr_INSTALL_DIR}/${cmr_CMAKE_RELEASE}/CMake.app/Contents


# === Scripts ===

# === Before install script ===
before_install_script: &before_install_script
  before_install: ./ci/scripts/before_install.sh

desctop_before_install_script: &desctop_before_install_script
  <<: *before_install_script
  git:
    submodules: false

host_tools_before_install_script: &host_tools_before_install_script
  <<: *before_install_script
  git:
    submodules: false

mobile_before_install_script: &mobile_before_install_script
  <<: *before_install_script
  git:
    clone: false

test_before_install_script: &test_before_install_script
  <<: *before_install_script
  git:
    clone: false


# === Build Host Tools script ===
build_host_tools_script: &build_host_tools_script
  git:
    submodules: false
  script: ./ci/scripts/build_host_tools.sh


# === Build Project script ===
build_script: &build_script
  script: ./ci/scripts/build_project.sh


# === Test script ===
test_script: &test_script
  script: ./ci/scripts/test_project.sh


# === Configs ===

# === Images ===
linux_img: &linux_img
  os: linux
  dist: bionic

windows_img: &windows_img
  os: windows

macos_img: &macos_img
  os: osx
  osx_image: xcode10.2

android_img: &android_img
  os: linux
  dist: bionic

ios_img: &ios_img
  os: osx
  osx_image: xcode10.2


# === Addons ===
common_addons: &common_addons
  ssh_known_hosts:
    - github.com

linux_addons: &linux_addons
  apt:
    packages: &linux_packages
# wxWidgets deps
#      - libgtk-3-dev  # Only with GTK3. Do not include it for GTK2.
      - libgtk2.0-dev
#      - libgstreamermm-1.0-dev
##      - libgstreamermm-0.10-dev  # Does not exist in Xenial.
#      - libgstreamer1.0-dev
#      - libgstreamer-plugins-base1.0-dev
#      - libgstreamer0.10-dev
#      - libgstreamer-plugins-base0.10-dev
#      - libwebkitgtk-dev
#      - libglu1-mesa-dev
#      - libsecret-1-dev
#      - libnotify-dev

linux_gcc_addons: &linux_gcc_addons
  apt:
    sources: &linux_gcc_sources
#        - ubuntu-toolchain-r-test
      - sourceline: "ppa:ubuntu-toolchain-r/test"
    packages: &linux_gcc_packages
      - gcc-9
      - g++-9

linux_clang_addons: &linux_clang_addons
  apt:
    sources: &linux_clang_sources
#      - ubuntu-toolchain-r-test
      - sourceline: "ppa:ubuntu-toolchain-r/test"
#      - llvm-toolchain-bionic-9
      - sourceline: 'deb http://apt.llvm.org/bionic/ llvm-toolchain-bionic-9 main'
        key_url: 'https://apt.llvm.org/llvm-snapshot.gpg.key'
    packages: &linux_clang_packages
      - gcc-9  # g++-9 is needed as clang uses its libraries by default.
      - g++-9
      - clang-9

android_addons: &android_addons
  apt:
    packages: &android_packages
      - ninja-build


# === Job templates ===

# === Linux ===
linux_gcc_debug_shared: &linux_gcc_debug_shared
  name: "Linux, x64, GCC, Debug, shared"
  <<: *linux_img
  compiler: gcc-9
  addons:
    <<: *common_addons
    <<: *linux_addons
    <<: *linux_gcc_addons
    apt:
      sources:
        - *linux_gcc_sources
      packages:
        - *linux_packages
        - *linux_gcc_packages
  env:
    - *debug_shared_env
    - *linux_env
    - *cmake_1st_env
    - *linux_cmake_env
    - *cmake_2nd_env
    - *linux_gcc_env


linux_clang_debug_shared: &linux_clang_debug_shared
  name: "Linux, x64, CLang, Debug, shared"
  <<: *linux_img
  compiler: clang-9
  addons:
    <<: *common_addons
    <<: *linux_addons
    <<: *linux_clang_addons
    apt:
      sources:
        - *linux_clang_sources
      packages:
        - *linux_packages
        - *linux_clang_packages
  env:
    - *debug_shared_env
    - *linux_env
    - *cmake_1st_env
    - *linux_cmake_env
    - *cmake_2nd_env
    - *linux_clang_env


# === Windows ===
windows_msvc_x64_release_shared: &windows_msvc_x64_release_shared
  name: "Windows, x64, MSVC, Release, shared"
  <<: *windows_img
  addons:
    <<: *common_addons
  env:
    - *release_shared_env
    - *windows_env
    - *cmake_1st_env
    - *windows_cmake_env
    - *cmake_2nd_env
    - *windows_msvc_env
    - *windows_msvc_x64_env

windows_mingw_x64_release_shared: &windows_mingw_x64_release_shared
  name: "Windows, x64, GCC, MinGW, Release, shared"
  <<: *windows_img
  addons:
    <<: *common_addons
  env:
    - *release_shared_env
    - *windows_env
    - *cmake_1st_env
    - *windows_cmake_env
    - *cmake_2nd_env
    - *windows_mingw_env


# === macOS ===
macos_clang_xcode_release_shared: &macos_clang_xcode_release_shared
  name: "macOS, x86, Clang, Xcode, Release, shared"
  <<: *macos_img
  compiler: clang
  addons:
    <<: *common_addons
  env:
    - *release_shared_env
    - *macos_env
    - *cmake_1st_env
    - *macos_cmake_env
    - *cmake_2nd_env
    - *macos_xcode_env

macos_clang_make_release_shared: &macos_clang_make_release_shared
  name: "macOS, x86, Clang, Unix Makefiles, Release, shared"
  <<: *macos_img
  compiler: clang
  addons:
    <<: *common_addons
  env:
    - *release_shared_env
    - *macos_env
    - *cmake_1st_env
    - *macos_cmake_env
    - *cmake_2nd_env
    - *macos_make_env


# === Android ===
android_release_shared_armeabi_v7a: &android_release_shared_armeabi_v7a
  name: "Android, armeabi-v7a, Clang, Release, shared"
  <<: *android_img
  addons:
    <<: *common_addons
    <<: *android_addons
  env:
    - *release_shared_env
    - *android_env
    - *cmake_1st_env
    - *android_cmake_env
    - *cmake_2nd_env
    - *android_armeabi_v7a_env


# === iOS ===
ios_clang_xcode_release_shared: &ios_clang_xcode_release_shared
  name: "iOS, x86, Clang, Xcode, Release, shared"
  <<: *ios_img
  compiler: clang
  addons:
    <<: *common_addons
  env:
    - *release_shared_env
    - *ios_env
    - *cmake_1st_env
    - *ios_cmake_env
    - *cmake_2nd_env


# === Build matrix ===

# === Stages ===
stages:
  - "Build Host Tools"
  - "Build Project"
  - "Test Project"


# === Jobs ===
jobs:
  include:
# Linux, GCC
    - stage: "Build Project"
      <<: *linux_gcc_debug_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *linux_gcc_debug_shared
      <<: *test_before_install_script
      <<: *test_script

# Linux, Clang
    - stage: "Build Project"
      <<: *linux_clang_debug_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *linux_clang_debug_shared
      <<: *test_before_install_script
      <<: *test_script

# Windows, MSVC
    - stage: "Build Project"
      <<: *windows_msvc_x64_release_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *windows_msvc_x64_release_shared
      <<: *test_before_install_script
      <<: *test_script

# Windows, MinGW
    - stage: "Build Project"
      <<: *windows_mingw_x64_release_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *windows_mingw_x64_release_shared
      <<: *test_before_install_script
      <<: *test_script


# macOS, Xcode
    - stage: "Build Project"
      <<: *macos_clang_xcode_release_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *macos_clang_xcode_release_shared
      <<: *test_before_install_script
      <<: *test_script


# macOS, Unix Makefiles
    - stage: "Build Project"
      <<: *macos_clang_make_release_shared
      <<: *desctop_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *macos_clang_make_release_shared
      <<: *test_before_install_script
      <<: *test_script


# Android
    - stage: "Build Host Tools"
      <<: *android_release_shared_armeabi_v7a
      <<: *host_tools_before_install_script
      <<: *build_host_tools_script

    - stage: "Build Project"
      <<: *android_release_shared_armeabi_v7a
      <<: *mobile_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *android_release_shared_armeabi_v7a
      <<: *test_before_install_script
      <<: *test_script


# iOS
    - stage: "Build Host Tools"
      <<: *ios_clang_xcode_release_shared
      <<: *host_tools_before_install_script
      <<: *build_host_tools_script

    - stage: "Build Project"
      <<: *ios_clang_xcode_release_shared
      <<: *mobile_before_install_script
      <<: *build_script

    - stage: "Test Project"
      <<: *ios_clang_xcode_release_shared
      <<: *test_before_install_script
      <<: *test_script


# Trigger downstreams
# Trigger the building of the dependent libs.
    - stage: "Trigger downstreams"
      name: "Trigger downstreams"
      if: branch = skipped  # TODO: remove it after fix Windows build with secure vars and add secure var TRAVIS_ACCESS_TOKEN.

      before_install:
        - gem install travis
        - mkdir ${cmr_REPO_DIR}
        - mkdir ${cmr_SAMPLE_LIB_DIR} # TODO: change dir
        - git clone https://github.com/LibCMaker/LibCMaker.git ${cmr_SAMPLE_LIB_DIR}/LibCMaker # TODO: change dir

      script:
        - cp ${cmr_SAMPLE_LIB_DIR}/LibCMaker/ci/travis/trigger.sh ${TRAVIS_BUILD_DIR}/ # TODO: change dir
        - cp ${cmr_SAMPLE_LIB_DIR}/LibCMaker/ci/travis/trigger-travis.sh ${TRAVIS_BUILD_DIR}/ # TODO: change dir
        - cd ${TRAVIS_BUILD_DIR} # TODO: change dir

        # NOTE: LibCMaker lib triggers.
        - ./trigger.sh LibCMaker LibCMaker_FontConfig       master $TRAVIS_ACCESS_TOKEN


# === Notifications ===

notifications:
  email:
    recipients:
      - nfeodonit@yandex.com
    on_success: always
    on_failure: always
